/* eslint-disable */
/* @formatter:off */

import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVFdVMQU1FMy45OS41VVVVVVVVVVVV//s0xPMABhQ9D6CEZPDEiaH0MIoWVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xP2ABbwA+6CIaXEjoh50VIqOVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xP8AAwQU66AMwLGHIZY09BnvVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xMMDwDACAAeAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;